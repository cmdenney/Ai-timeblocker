// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events              Event[]
  chatSessions        ChatSession[]
  calendarConnections CalendarConnection[]
  preferences         UserPreference?

  @@map("users")
}

// Events table
model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  isAllDay    Boolean   @default(false)
  recurrence  String?   // RRULE format
  location    String?
  color       String?   @default("#3b82f6")

  // External calendar sync
  googleEventId  String?
  outlookEventId String?

  // AI metadata
  createdByAI    Boolean @default(false)
  confidence     Float?  // AI confidence score
  originalPrompt String?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

// Chat sessions for AI interactions
model ChatSession {
  id       String  @id @default(cuid())
  title    String?
  isActive Boolean @default(true)

  // Relations
  userId   String
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chat_sessions")
}

// Individual chat messages
model ChatMessage {
  id        String @id @default(cuid())
  content   String
  role      String // 'user' | 'assistant' | 'system'
  metadata  Json?  // Store parsed events, confidence scores, etc.

  // Relations
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("chat_messages")
}

// Calendar connections for external services
model CalendarConnection {
  id           String    @id @default(cuid())
  provider     String    // 'google' | 'outlook' | 'apple'
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?

  // Provider-specific data
  calendarId String?
  timeZone   String?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, provider])
  @@map("calendar_connections")
}

// User preferences and settings
model UserPreference {
  id             String  @id @default(cuid())
  timeZone       String  @default("UTC")
  timeFormat     String  @default("12h") // '12h' | '24h'
  weekStartsOn   Int     @default(0)     // 0 = Sunday, 1 = Monday
  workingHours   Json?   // { start: "09:00", end: "17:00" }
  defaultDuration Int    @default(60)    // minutes

  // AI preferences
  aiSuggestions Boolean @default(true)
  autoSchedule  Boolean @default(false)

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}
